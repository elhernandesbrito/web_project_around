!function(){"use strict";var t={d:function(e,r){for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function r(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,n(o.key),o)}}function n(t){var r=function(t,r){if("object"!=e(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!=e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==e(r)?r:r+""}t.d({},{b:function(){return ut}});var o=function(){return t=function t(e,r,n,o,i){var a=e.name,c=e.link,u=e.likes,s=e._id,l=e.owner,f=e.createdAt;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=a,this._link=c,this._likes=u,this._id=s,this._owner=l,this._createdAt=f,this._handleCardClick=r,this._handleDeleteClick=n,this._userId=o,this._api=i},(e=[{key:"_getTemplate",value:function(){return document.querySelector("#cards").content.querySelector(".cards__card").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var t=this;this._cardItem.querySelector(".cards__cardLike").addEventListener("click",(function(e){e.target.classList.toggle("cards__cardLike_active"),t._toggleLike()}));var e=this._cardItem.querySelector(".cards__card-lixeira");e&&e.addEventListener("click",(function(){t._handleDeleteClick(t._id,t._cardItem)})),this._cardItem.querySelector(".cards__card-img").addEventListener("click",(function(){t._handleCardClick(t._link,t._name)}))}},{key:"_toggleLike",value:function(){var t=this._cardItem.querySelector(".cards__cardLike"),e=this._cardItem.querySelector(".cards__like-counter");t.classList.contains("cards__cardLike_active")?this._api.unlikeCard(this._id).then((function(r){e.textContent=r.likes.length,t.classList.remove("cards__cardLike_active")})).catch((function(t){return console.error("Erro ao remover curtida: ".concat(t))})):this._api.likeCard(this._id).then((function(r){e.textContent=r.likes.length,t.classList.add("cards__cardLike_active")})).catch((function(t){return console.error("Erro ao adicionar curtida: ".concat(t))}))}},{key:"generateCard",value:function(){var t=this;return this._cardItem=this._getTemplate(),this._cardItem.querySelector(".cards__card-img").setAttribute("src",this._link),this._cardItem.querySelector(".cards__card-img").setAttribute("alt",this._name),this._cardItem.querySelector(".cards__card-name").textContent=this._name,this._cardItem.querySelector(".cards__like-counter").textContent=this._likes.length,this._cardItem.setAttribute("data-id",this._id),this._cardItem.querySelector(".cards__card-owner").textContent=this._owner.name,this._cardItem.querySelector(".cards__card-created").textContent=new Date(this._createdAt).toLocaleDateString(),this._owner._id!==this._userId&&(this._cardItem.querySelector(".cards__card-lixeira").style.display="none"),this._likes.some((function(e){return e._id===t._userId}))&&this._cardItem.querySelector(".cards__cardLike").classList.add("cards__cardLike_active"),this._setEventListeners(),this._cardItem}}])&&r(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,c(n.key),n)}}function c(t){var e=function(t,e){if("object"!=i(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==i(e)?e:e+""}var u=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._form=document.querySelector(e),this._inputList=Array.from(this._form.querySelectorAll(".name-input")),this._submitButton=this._form.querySelector(".saveButton"),this._submitProfileInactive="popup__submit-save_inactive",this._submitCardsInactive="popupCards__submit-save_inactive",this._submitAvatarInactive="popupAvatarUpdate__submit-save_inactive"},(e=[{key:"_showInputError",value:function(t,e){var r=t.parentElement.querySelector(".form-input-error");t.classList.add("form-input_type_error"),r.textContent=e,r.classList.add("form-input-error_active")}},{key:"_hideInputError",value:function(t){var e=t.parentElement.querySelector(".form-input-error");t.classList.remove("form-input_type_error"),e.textContent="",e.classList.remove("form-input-error_active")}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage),this._toggleButtonState()}},{key:"_toggleButtonState",value:function(){this._inputList.every((function(t){return t.validity.valid}))?(this._submitButton.classList.remove(this._submitProfileInactive),this._submitButton.classList.remove(this._submitCardsInactive),this._submitButton.classList.remove(this._submitAvatarInactive),this._submitButton.removeAttribute("disabled")):(this._submitButton.classList.add(this._submitProfileInactive),this._submitButton.classList.add(this._submitCardsInactive),this._submitButton.classList.add(this._submitAvatarInactive),this._submitButton.setAttribute("disabled","disabled"))}},{key:"_handleInput",value:function(t){var e=t.target;this._checkInputValidity(e)}},{key:"enableValidation",value:function(){var t=this;this._form.addEventListener("submit",(function(t){t.preventDefault()})),this._toggleButtonState(),this._inputList.forEach((function(e){e.addEventListener("input",t._handleInput.bind(t))}))}}])&&a(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,f(n.key),n)}}function f(t){var e=function(t,e){if("object"!=s(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==s(e)?e:e+""}var p=function(){return t=function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popup=document.querySelector(e),this._openClass=r,this._closeButton=this._popup.querySelector(".popup__closeButton")||this._popup.querySelector(".popupCards__closeButton")||this._popup.querySelector(".imageDisplay__close")||this._popup.querySelector(".popupWithConfirmation__closeButton")||this._popup.querySelector(".popupAvatarUpdate__closeButton"),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClose=this._handleOverlayClose.bind(this)},(e=[{key:"open",value:function(){this._popup.classList.add(this._openClass),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("click",this._handleOverlayClose)}},{key:"close",value:function(){this._popup.classList.remove(this._openClass),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this._handleOverlayClose)}},{key:"setEventListeners",value:function(){var t=this;this._closeButton&&this._closeButton.addEventListener("click",(function(){t.close()}))}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"_handleOverlayClose",value:function(t){t.target===this._popup&&this.close()}}])&&l(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function d(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,m(n.key),n)}}function m(t){var e=function(t,e){if("object"!=y(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==y(e)?e:e+""}function v(t,e,r){return e=b(e),function(t,e){if(e&&("object"==y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,_()?Reflect.construct(e,r||[],b(t).constructor):e.apply(t,r))}function _(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_=function(){return!!t})()}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=b(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},h.apply(null,arguments)}function b(t){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},b(t)}function S(t,e){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},S(t,e)}var g=function(t){function e(t,r){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=v(this,e,[t,r]))._imageElement=n._popup.querySelector(".imageDisplay__img"),n._imageTitle=n._popup.querySelector(".imageDisplay__title"),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&S(t,e)}(e,t),r=e,(n=[{key:"open",value:function(t){var r=t.src,n=t.alt;this._imageElement.src=r,this._imageElement.alt=n,this._imageTitle.textContent=n,h(b(e.prototype),"open",this).call(this)}}])&&d(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(p);function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function k(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,E(n.key),n)}}function E(t){var e=function(t,e){if("object"!=w(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=w(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==w(e)?e:e+""}function j(t,e,r){return e=P(e),function(t,e){if(e&&("object"==w(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,C()?Reflect.construct(e,r||[],P(t).constructor):e.apply(t,r))}function C(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(C=function(){return!!t})()}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=P(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},O.apply(null,arguments)}function P(t){return P=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},P(t)}function L(t,e){return L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},L(t,e)}var q=function(t){function e(t,r,n){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(o=j(this,e,[t,r]))._handleFormSubmit=n,o._form=o._popup.querySelector("form"),o._inputList=Array.from(o._form.querySelectorAll("input")),o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&L(t,e)}(e,t),r=e,(n=[{key:"_getInputValues",value:function(){var t={};return this._inputList.forEach((function(e){t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var t=this;O(P(e.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit(t._getInputValues())}))}},{key:"close",value:function(){O(P(e.prototype),"close",this).call(this),this._form.reset()}}])&&k(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(p);function I(t){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},I(t)}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,A(n.key),n)}}function A(t){var e=function(t,e){if("object"!=I(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=I(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==I(e)?e:e+""}var B=function(){return t=function t(e){var r=e.nameSelector,n=e.profileSelector,o=e.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nameElement=document.querySelector(r),this._profileElement=document.querySelector(n),this._avatarElement=document.querySelector(o)},(e=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,profile:this._profileElement.textContent,avatar:this._avatarElement.src}}},{key:"setUserInfo",value:function(t){var e=t.name,r=t.profile,n=t.avatar;e&&(this._nameElement.textContent=e),r&&(this._profileElement.textContent=r),n&&(this._avatarElement.src=n)}}])&&T(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function U(t){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},U(t)}function x(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,R(n.key),n)}}function R(t){var e=function(t,e){if("object"!=U(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=U(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==U(e)?e:e+""}var D=function(){return t=function t(e,r){var n=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=n,this._renderer=o,this._container=document.querySelector(r)},(e=[{key:"render",value:function(){var t=this;this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&x(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function N(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,W(n.key),n)}}function W(t){var e=function(t,e){if("object"!=V(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=V(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==V(e)?e:e+""}var z=function(){return t=function t(e){var r=e.baseUrl,n=e.headers;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=r,this._headers=n},(e=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}},{key:"updateUserInfo",value:function(t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t.name,about:t.about})}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}},{key:"addNewCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t.name,link:t.link})}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}},{key:"deleteCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/").concat(t),{method:"DELETE",headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}},{key:"likeCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{method:"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"unlikeCard",value:function(t){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"_checkResponse",value:function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))}},{key:"updateAvatar",value:function(t){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t.avatar})}).then((function(t){return t.ok?t.json():Promise.reject("Erro: ".concat(t.status))})).catch((function(t){return console.error(t)}))}}])&&N(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function J(t){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},J(t)}function M(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,F(n.key),n)}}function F(t){var e=function(t,e){if("object"!=J(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=J(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==J(e)?e:e+""}function H(t,e,r){return e=Q(e),function(t,e){if(e&&("object"==J(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,G()?Reflect.construct(e,r||[],Q(t).constructor):e.apply(t,r))}function G(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(G=function(){return!!t})()}function K(){return K="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=Q(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},K.apply(null,arguments)}function Q(t){return Q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Q(t)}function X(t,e){return X=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},X(t,e)}var Y,Z=function(t){function e(t,r){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=H(this,e,[t,r]))._confirmButton=n._popup.querySelector(".popupWithConfirmation__submit-save"),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&X(t,e)}(e,t),r=e,(n=[{key:"setSubmitAction",value:function(t){this._confirmCallback=t}},{key:"setEventListeners",value:function(){var t=this;K(Q(e.prototype),"setEventListeners",this).call(this),this._confirmButton.addEventListener("click",(function(e){e.preventDefault(),ut(!0,t._confirmButton,"SIM"),t._confirmCallback().finally((function(){ut(!1,t._confirmButton,"SIM")}))}))}}])&&M(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(p),$=document.querySelector(".profile__edit"),tt=document.querySelector(".form"),et=tt.querySelector(".popup__form-name"),rt=tt.querySelector(".popup__form-Explorar"),nt=(document.querySelector(".profile__name"),document.querySelector(".profile__explorer"),document.querySelector(".rechardCards"),document.querySelector(".profile__addButton")),ot=document.querySelector(".popupCards__form"),it=ot.querySelector(".popupCards__form-name"),at=ot.querySelector(".popupCards__form-link"),ct=(document.querySelector(".popupAvatarUpdate__form"),new z({baseUrl:"https://around.nomoreparties.co/v1/web-ptbr-cohort-13",headers:{authorization:"97e95232-0267-49b3-97cb-91d7637baff3","Content-Type":"application/json"}}));function ut(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Salvar";e.textContent=t?"Salvando...":r}var st=new B({nameSelector:".profile__name",profileSelector:".profile__explorer",avatarSelector:".profile__avatar"});ct.getUserInfo().then((function(t){Y=t._id,st.setUserInfo({name:t.name,profile:t.about,avatar:t.avatar}),document.querySelector(".profile__avatar").src=t.avatar})).catch((function(t){console.error(t)}));var lt=new D({items:[],renderer:function(t){var e=vt(t);_t.append(e)}},".rechardCards");ct.getInitialCards().then((function(t){new D({items:t,renderer:function(t){var e=vt(t);_t.append(e)}},".rechardCards").render()})).catch((function(t){console.error(t)}));var ft=new q(".popup","popup_change_display",(function(t){var e=document.querySelector(".popup__submit-save");ut(!0,e),ct.updateUserInfo({name:t.name,about:t.explorar}).then((function(t){st.setUserInfo({name:t.name,profile:t.about,avatar:t.avatar}),ft.close()})).catch((function(t){console.error("Erro ao atualizar o perfil: ".concat(t))})).finally((function(){ut(!1,e)}))}));ft.setEventListeners();var pt=new q(".popupCards","popupCards_change_display",(function(t){var e=document.querySelector(".popupCards__submit-save");ut(!0,e),ct.addNewCard({name:t.name,link:t.link}).then((function(t){var e=vt(t);lt.addItem(e),pt.close()})).catch((function(t){console.error("Erro ao adicionar o cartão: ".concat(t))})).finally((function(){ut(!1,e)}))}));pt.setEventListeners();var yt=new g(".imageDisplay","imageDisplay_change_display");function dt(t,e){mt.open(),mt.setSubmitAction((function(){return ct.deleteCard(t).then((function(){e.remove(),mt.close()})).catch((function(t){return console.error("Erro ao excluir o cartão: ".concat(t))}))}))}yt.setEventListeners();var mt=new Z(".popupWithConfirmation","popupWithConfirmation_change_display");function vt(t){return new o(t,(function(t,e){return yt.open({src:t,alt:e})}),dt,Y,ct).generateCard()}mt.setEventListeners();var _t=document.querySelector(".rechardCards");$.addEventListener("click",(function(){var t,e=st.getUserInfo();et.value=e.name,rt.value=e.profile,ft.open(),t=document.querySelector(".popup__submit-save"),et.value="",rt.value="",t.classList.add("popup__submit-save_inactive"),et.classList.remove("form-input_type_error"),rt.classList.remove("form-input_type_error"),document.querySelectorAll(".form-input-error").forEach((function(t){t.textContent="",t.classList.remove("form-input-error_active")}))})),nt.addEventListener("click",(function(){pt.open(),function(){it.value="",at.value="";var t=document.querySelector(".popupCards__submit-save");t.classList.add("popupCards__submit-save_inactive"),t.setAttribute("disabled","disabled"),it.classList.remove("form-input_type_error"),at.classList.remove("form-input_type_error"),document.querySelectorAll(".form-input-error").forEach((function(t){t.textContent="",t.classList.remove("form-input-error_active")}))}()}));var ht=new q(".popupAvatarUpdate","popupAvatarUpdate_change_display",(function(t){var e=document.querySelector(".popupAvatarUpdate__submit-save");ut(!0,e),ct.updateAvatar({avatar:t.link}).then((function(t){st.setUserInfo({avatar:t.avatar}),document.querySelector(".profile__avatar").src=t.avatar,ht.close()})).catch((function(t){console.error("Erro ao atualizar o avatar: ".concat(t))})).finally((function(){ut(!1,e)}))}));ht.setEventListeners(),document.querySelector(".profile__editAvatar").addEventListener("click",(function(){ht.open()})),new u(".popup__form").enableValidation(),new u(".popupCards__form").enableValidation(),new u(".popupAvatarUpdate__form").enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,